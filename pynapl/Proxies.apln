:Namespace Proxies
    (⎕IO ⎕ML) ← 0 1

    ∇ json_data←Encode obj
        ⍝ Leave simple scalars untouched:
      :If (0=≡obj)∧0 1 3 5∊⍨10|⎕DR obj
          json_data←obj
        ⍝ Encode _any_ array:
      :ElseIf ⍬≢⍴obj
          json_data←EncodeArray obj
        ⍝ Encode namespaces:
      :ElseIf 9.1=42 ⎕ATX'obj'
          json_data←EncodeNamespace obj
      :EndIf
    ∇

    ∇ obj←Decode json_data
        ⍝ If it is not a namespace, it does not require special treatment:
      :If 9≠⎕NC'json_data'
          obj←json_data
          :Return
      :EndIf
     
      :Select json_data.__extended_json_type__
      :Case 'APLArray'
          obj←DecodeArray json_data
      :Case 'APLNamespace'
          obj←DecodeNamespace json_data
      :EndSelect
    ∇

      EncodeArray←{
          ns←⎕NS ⍬
          ns.__extended_json_type__←'APLArray'
          ns.shape←⍴⍵
          ns.data←,Encode¨⍵
          ns
      }

      DecodeArray←{
          'APLArray'≢⍵.__extended_json_type__:'Cannot decode!'⎕SIGNAL 8
          ⍵.shape⍴Decode¨⍵.data
      }

      EncodeNamespace←{
          ns←⎕NS ⍬
          ns.__extended_json_type__←'APLNamespace'
          ns.ns←⎕NS ⍵
          names←⎕←ns.ns.⎕NL-⍳10
          0=≢names:ns
          ns⊣ns.ns{⍎'⍺.',⍵,' ← Encode ⍺.',⍵}¨names
      }

      DecodeNamespace←{
          'APLNamespace'≢⍵.__extended_json_type__:'Cannot decode!'⎕SIGNAL 8
          ns←⎕NS ⍵.ns
          names←ns.⎕NL-⍳10
          0=≢names:ns
          ns⊣ns{⍎'⍺.',⍵,' ← Decode ⍺.',⍵}¨names
      }
:EndNamespace
